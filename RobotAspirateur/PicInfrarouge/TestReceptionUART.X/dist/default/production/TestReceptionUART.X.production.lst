

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Sun Jun 16 18:35:01 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	maintext,global,class=CODE,split=1,delta=2
     8                           	psect	text1,local,class=CODE,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,merge=1,delta=2
    10                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    11                           	psect	text4,local,class=CODE,merge=1,delta=2
    12                           	dabs	1,0x7E,2
    13  0000                     
    14                           ; Version 2.05
    15                           ; Generated 20/12/2018 GMT
    16                           ; 
    17                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    18                           ; All rights reserved.
    19                           ; 
    20                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    21                           ; 
    22                           ; Redistribution and use in source and binary forms, with or without modification, are
    23                           ; permitted provided that the following conditions are met:
    24                           ; 
    25                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    26                           ;        conditions and the following disclaimer.
    27                           ; 
    28                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    29                           ;        of conditions and the following disclaimer in the documentation and/or other
    30                           ;        materials provided with the distribution.
    31                           ; 
    32                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    33                           ;        software without specific prior written permission.
    34                           ; 
    35                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    36                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    37                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    38                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    39                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    40                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    41                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    42                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    43                           ; 
    44                           ; 
    45                           ; Code-generator required, PIC16F877A Definitions
    46                           ; 
    47                           ; SFR Addresses
    48  0000                     	;# 
    49  0001                     	;# 
    50  0002                     	;# 
    51  0003                     	;# 
    52  0004                     	;# 
    53  0005                     	;# 
    54  0006                     	;# 
    55  0007                     	;# 
    56  0008                     	;# 
    57  0009                     	;# 
    58  000A                     	;# 
    59  000B                     	;# 
    60  000C                     	;# 
    61  000D                     	;# 
    62  000E                     	;# 
    63  000E                     	;# 
    64  000F                     	;# 
    65  0010                     	;# 
    66  0011                     	;# 
    67  0012                     	;# 
    68  0013                     	;# 
    69  0014                     	;# 
    70  0015                     	;# 
    71  0015                     	;# 
    72  0016                     	;# 
    73  0017                     	;# 
    74  0018                     	;# 
    75  0019                     	;# 
    76  001A                     	;# 
    77  001B                     	;# 
    78  001B                     	;# 
    79  001C                     	;# 
    80  001D                     	;# 
    81  001E                     	;# 
    82  001F                     	;# 
    83  0081                     	;# 
    84  0085                     	;# 
    85  0086                     	;# 
    86  0087                     	;# 
    87  0088                     	;# 
    88  0089                     	;# 
    89  008C                     	;# 
    90  008D                     	;# 
    91  008E                     	;# 
    92  0091                     	;# 
    93  0092                     	;# 
    94  0093                     	;# 
    95  0094                     	;# 
    96  0098                     	;# 
    97  0099                     	;# 
    98  009C                     	;# 
    99  009D                     	;# 
   100  009E                     	;# 
   101  009F                     	;# 
   102  010C                     	;# 
   103  010D                     	;# 
   104  010E                     	;# 
   105  010F                     	;# 
   106  018C                     	;# 
   107  018D                     	;# 
   108  0000                     	;# 
   109  0001                     	;# 
   110  0002                     	;# 
   111  0003                     	;# 
   112  0004                     	;# 
   113  0005                     	;# 
   114  0006                     	;# 
   115  0007                     	;# 
   116  0008                     	;# 
   117  0009                     	;# 
   118  000A                     	;# 
   119  000B                     	;# 
   120  000C                     	;# 
   121  000D                     	;# 
   122  000E                     	;# 
   123  000E                     	;# 
   124  000F                     	;# 
   125  0010                     	;# 
   126  0011                     	;# 
   127  0012                     	;# 
   128  0013                     	;# 
   129  0014                     	;# 
   130  0015                     	;# 
   131  0015                     	;# 
   132  0016                     	;# 
   133  0017                     	;# 
   134  0018                     	;# 
   135  0019                     	;# 
   136  001A                     	;# 
   137  001B                     	;# 
   138  001B                     	;# 
   139  001C                     	;# 
   140  001D                     	;# 
   141  001E                     	;# 
   142  001F                     	;# 
   143  0081                     	;# 
   144  0085                     	;# 
   145  0086                     	;# 
   146  0087                     	;# 
   147  0088                     	;# 
   148  0089                     	;# 
   149  008C                     	;# 
   150  008D                     	;# 
   151  008E                     	;# 
   152  0091                     	;# 
   153  0092                     	;# 
   154  0093                     	;# 
   155  0094                     	;# 
   156  0098                     	;# 
   157  0099                     	;# 
   158  009C                     	;# 
   159  009D                     	;# 
   160  009E                     	;# 
   161  009F                     	;# 
   162  010C                     	;# 
   163  010D                     	;# 
   164  010E                     	;# 
   165  010F                     	;# 
   166  018C                     	;# 
   167  018D                     	;# 
   168  0006                     _PORTB	set	6
   169  001A                     _RCREG	set	26
   170  0019                     _TXREG	set	25
   171  0065                     _RCIF	set	101
   172  00C4                     _CREN	set	196
   173  00C7                     _SPEN	set	199
   174  0086                     _TRISB	set	134
   175  0099                     _SPBRG	set	153
   176  04C1                     _TRMT	set	1217
   177  04C5                     _TXEN	set	1221
   178  043E                     _TRISC6	set	1086
   179  043F                     _TRISC7	set	1087
   180  04C4                     _SYNC	set	1220
   181  04C2                     _BRGH	set	1218
   182                           
   183                           ; #config settings
   184  0000                     
   185                           	psect	cinit
   186  07FC                     start_initialization:	
   187  07FC                     __initialization:	
   188  07FC                     end_of_initialization:	
   189                           ;End of C runtime variable initialization code
   190                           
   191  07FC                     __end_of__initialization:	
   192  07FC  0183               	clrf	3
   193  07FD  120A  118A  2E67   	ljmp	_main	;jump to C main() function
   194                           
   195                           	psect	cstackCOMMON
   196  0070                     __pcstackCOMMON:	
   197  0070                     ?_UART_Data_Ready:	
   198  0070                     ??_UART_Data_Ready:	
   199                           ; 1 bytes @ 0x0
   200                           
   201  0070                     ?_UART_Read:	
   202                           ; 1 bytes @ 0x0
   203                           
   204  0070                     ??_UART_Read:	
   205                           ; 1 bytes @ 0x0
   206                           
   207  0070                     ?_main:	
   208                           ; 1 bytes @ 0x0
   209                           
   210  0070                     ?___aldiv:	
   211                           ; 1 bytes @ 0x0
   212                           
   213  0070                     ___aldiv@divisor:	
   214                           ; 4 bytes @ 0x0
   215                           
   216                           
   217                           ; 4 bytes @ 0x0
   218  0070                     	ds	4
   219  0074                     ___aldiv@dividend:	
   220                           
   221                           ; 4 bytes @ 0x4
   222  0074                     	ds	4
   223  0078                     ??___aldiv:	
   224                           
   225                           ; 1 bytes @ 0x8
   226  0078                     	ds	1
   227  0079                     UART_Init@x:	
   228                           
   229                           ; 2 bytes @ 0x9
   230  0079                     	ds	2
   231  007B                     ??_main:	
   232                           
   233                           ; 1 bytes @ 0xB
   234  007B                     	ds	3
   235                           
   236                           	psect	cstackBANK0
   237  0020                     __pcstackBANK0:	
   238  0020                     ___aldiv@counter:	
   239                           
   240                           ; 1 bytes @ 0x0
   241  0020                     	ds	1
   242  0021                     ___aldiv@sign:	
   243                           
   244                           ; 1 bytes @ 0x1
   245  0021                     	ds	1
   246  0022                     ___aldiv@quotient:	
   247                           
   248                           ; 4 bytes @ 0x2
   249  0022                     	ds	4
   250  0026                     ?_UART_Init:	
   251  0026                     UART_Init@baudrate:	
   252                           ; 1 bytes @ 0x6
   253                           
   254                           
   255                           ; 4 bytes @ 0x6
   256  0026                     	ds	4
   257  002A                     ??_UART_Init:	
   258                           
   259                           ; 1 bytes @ 0xA
   260  002A                     	ds	12
   261                           
   262                           	psect	maintext
   263  0667                     __pmaintext:	
   264 ;;
   265 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   266 ;;
   267 ;; *************** function _main *****************
   268 ;; Defined at:
   269 ;;		line 16 in file "main.c"
   270 ;; Parameters:    Size  Location     Type
   271 ;;		None
   272 ;; Auto vars:     Size  Location     Type
   273 ;;		None
   274 ;; Return value:  Size  Location     Type
   275 ;;                  1    wreg      void 
   276 ;; Registers used:
   277 ;;		wreg, status,2, status,0, pclath, cstack
   278 ;; Tracked objects:
   279 ;;		On entry : B00/0
   280 ;;		On exit  : 0/0
   281 ;;		Unchanged: 0/0
   282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   283 ;;      Params:         0       0       0       0       0
   284 ;;      Locals:         0       0       0       0       0
   285 ;;      Temps:          3       0       0       0       0
   286 ;;      Totals:         3       0       0       0       0
   287 ;;Total ram usage:        3 bytes
   288 ;; Hardware stack levels required when called:    2
   289 ;; This function calls:
   290 ;;		_UART_Data_Ready
   291 ;;		_UART_Init
   292 ;;		_UART_Read
   293 ;; This function is called by:
   294 ;;		Startup code after reset
   295 ;; This function uses a non-reentrant model
   296 ;;
   297                           
   298                           
   299                           ;psect for function _main
   300  0667                     _main:	
   301                           
   302                           ;incstack = 0
   303                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   304  0667  1683               	bsf	3,5	;RP0=1, select bank1
   305  0668  1303               	bcf	3,6	;RP1=0, select bank1
   306  0669  0186               	clrf	6	;volatile
   307  066A  3000               	movlw	0
   308  066B  1283               	bcf	3,5	;RP0=0, select bank0
   309  066C  1303               	bcf	3,6	;RP1=0, select bank0
   310  066D  00A9               	movwf	UART_Init@baudrate+3
   311  066E  3000               	movlw	0
   312  066F  00A8               	movwf	UART_Init@baudrate+2
   313  0670  3025               	movlw	37
   314  0671  00A7               	movwf	UART_Init@baudrate+1
   315  0672  3080               	movlw	128
   316  0673  00A6               	movwf	UART_Init@baudrate
   317  0674  120A  118A  2726  120A  118A  	fcall	_UART_Init
   318  0679                     l843:	
   319  0679  120A  118A  265B  120A  118A  	fcall	_UART_Data_Ready
   320  067E  3A00               	xorlw	0
   321  067F  1903               	skipnz
   322  0680  2E89               	goto	l847
   323  0681  120A  118A  2661  120A  118A  	fcall	_UART_Read
   324  0686  1283               	bcf	3,5	;RP0=0, select bank0
   325  0687  1303               	bcf	3,6	;RP1=0, select bank0
   326  0688  0086               	movwf	6	;volatile
   327  0689                     l847:	
   328  0689  3002               	movlw	2
   329  068A  00FD               	movwf	??_main+2
   330  068B  3004               	movlw	4
   331  068C  00FC               	movwf	??_main+1
   332  068D  30BA               	movlw	186
   333  068E  00FB               	movwf	??_main
   334  068F                     u437:	
   335  068F  0BFB               	decfsz	??_main,f
   336  0690  2E8F               	goto	u437
   337  0691  0BFC               	decfsz	??_main+1,f
   338  0692  2E8F               	goto	u437
   339  0693  0BFD               	decfsz	??_main+2,f
   340  0694  2E8F               	goto	u437
   341  0695  0000               	nop
   342  0696  2E79               	goto	l843
   343  0697                     __end_of_main:	
   344                           
   345                           	psect	text1
   346  0661                     __ptext1:	
   347 ;; *************** function _UART_Read *****************
   348 ;; Defined at:
   349 ;;		line 65 in file "./uart.h"
   350 ;; Parameters:    Size  Location     Type
   351 ;;		None
   352 ;; Auto vars:     Size  Location     Type
   353 ;;		None
   354 ;; Return value:  Size  Location     Type
   355 ;;                  1    wreg      unsigned char 
   356 ;; Registers used:
   357 ;;		wreg
   358 ;; Tracked objects:
   359 ;;		On entry : 0/0
   360 ;;		On exit  : 0/0
   361 ;;		Unchanged: 0/0
   362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   363 ;;      Params:         0       0       0       0       0
   364 ;;      Locals:         0       0       0       0       0
   365 ;;      Temps:          0       0       0       0       0
   366 ;;      Totals:         0       0       0       0       0
   367 ;;Total ram usage:        0 bytes
   368 ;; Hardware stack levels used:    1
   369 ;; This function calls:
   370 ;;		Nothing
   371 ;; This function is called by:
   372 ;;		_main
   373 ;;		_UART_Read_Text
   374 ;; This function uses a non-reentrant model
   375 ;;
   376                           
   377                           
   378                           ;psect for function _UART_Read
   379  0661                     _UART_Read:	
   380  0661                     l56:	
   381                           ;./uart.h: 67:   while(!RCIF);
   382                           
   383                           ;incstack = 0
   384                           ; Regs used in _UART_Read: [wreg]
   385                           
   386  0661  1283               	bcf	3,5	;RP0=0, select bank0
   387  0662  1303               	bcf	3,6	;RP1=0, select bank0
   388  0663  1E8C               	btfss	12,5	;volatile
   389  0664  2E61               	goto	l56
   390                           
   391                           ;./uart.h: 68:   return RCREG;
   392  0665  081A               	movf	26,w	;volatile
   393  0666  0008               	return
   394  0667                     __end_of_UART_Read:	
   395                           
   396                           	psect	text2
   397  0726                     __ptext2:	
   398 ;; *************** function _UART_Init *****************
   399 ;; Defined at:
   400 ;;		line 16 in file "./uart.h"
   401 ;; Parameters:    Size  Location     Type
   402 ;;  baudrate        4    6[BANK0 ] const long 
   403 ;; Auto vars:     Size  Location     Type
   404 ;;  x               2    9[COMMON] unsigned int 
   405 ;; Return value:  Size  Location     Type
   406 ;;                  1    wreg      unsigned char 
   407 ;; Registers used:
   408 ;;		wreg, status,2, status,0, pclath, cstack
   409 ;; Tracked objects:
   410 ;;		On entry : 0/0
   411 ;;		On exit  : 0/0
   412 ;;		Unchanged: 0/0
   413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   414 ;;      Params:         0       4       0       0       0
   415 ;;      Locals:         2       0       0       0       0
   416 ;;      Temps:          0      12       0       0       0
   417 ;;      Totals:         2      16       0       0       0
   418 ;;Total ram usage:       18 bytes
   419 ;; Hardware stack levels used:    1
   420 ;; Hardware stack levels required when called:    1
   421 ;; This function calls:
   422 ;;		___aldiv
   423 ;; This function is called by:
   424 ;;		_main
   425 ;; This function uses a non-reentrant model
   426 ;;
   427                           
   428                           
   429                           ;psect for function _UART_Init
   430  0726                     _UART_Init:	
   431                           
   432                           ;./uart.h: 16: char UART_Init(const long int baudrate);./uart.h: 17: {;./uart.h: 18:   u
      +                          nsigned int x;;./uart.h: 19:   x = (8000000 - baudrate*64)/(baudrate*64);
   433                           
   434                           ;incstack = 0
   435                           ; Regs used in _UART_Init: [wreg+status,2+status,0+pclath+cstack]
   436  0726  1283               	bcf	3,5	;RP0=0, select bank0
   437  0727  1303               	bcf	3,6	;RP1=0, select bank0
   438  0728  0826               	movf	UART_Init@baudrate,w
   439  0729  00AA               	movwf	??_UART_Init
   440  072A  0827               	movf	UART_Init@baudrate+1,w
   441  072B  00AB               	movwf	??_UART_Init+1
   442  072C  0828               	movf	UART_Init@baudrate+2,w
   443  072D  00AC               	movwf	??_UART_Init+2
   444  072E  0829               	movf	UART_Init@baudrate+3,w
   445  072F  00AD               	movwf	??_UART_Init+3
   446  0730  3006               	movlw	6
   447  0731                     u345:	
   448  0731  1003               	clrc
   449  0732  0DAA               	rlf	??_UART_Init,f
   450  0733  0DAB               	rlf	??_UART_Init+1,f
   451  0734  0DAC               	rlf	??_UART_Init+2,f
   452  0735  0DAD               	rlf	??_UART_Init+3,f
   453  0736  3EFF               	addlw	-1
   454  0737  1D03               	skipz
   455  0738  2F31               	goto	u345
   456  0739  082D               	movf	??_UART_Init+3,w
   457  073A  00F3               	movwf	___aldiv@divisor+3
   458  073B  082C               	movf	??_UART_Init+2,w
   459  073C  00F2               	movwf	___aldiv@divisor+2
   460  073D  082B               	movf	??_UART_Init+1,w
   461  073E  00F1               	movwf	___aldiv@divisor+1
   462  073F  082A               	movf	??_UART_Init,w
   463  0740  00F0               	movwf	___aldiv@divisor
   464  0741  0826               	movf	UART_Init@baudrate,w
   465  0742  00AE               	movwf	??_UART_Init+4
   466  0743  0827               	movf	UART_Init@baudrate+1,w
   467  0744  00AF               	movwf	??_UART_Init+5
   468  0745  0828               	movf	UART_Init@baudrate+2,w
   469  0746  00B0               	movwf	??_UART_Init+6
   470  0747  0829               	movf	UART_Init@baudrate+3,w
   471  0748  00B1               	movwf	??_UART_Init+7
   472  0749  3006               	movlw	6
   473  074A                     u355:	
   474  074A  1003               	clrc
   475  074B  0DAE               	rlf	??_UART_Init+4,f
   476  074C  0DAF               	rlf	??_UART_Init+5,f
   477  074D  0DB0               	rlf	??_UART_Init+6,f
   478  074E  0DB1               	rlf	??_UART_Init+7,f
   479  074F  3EFF               	addlw	-1
   480  0750  1D03               	skipz
   481  0751  2F4A               	goto	u355
   482  0752  3000               	movlw	0
   483  0753  00B2               	movwf	??_UART_Init+8
   484  0754  3012               	movlw	18
   485  0755  00B3               	movwf	??_UART_Init+9
   486  0756  307A               	movlw	122
   487  0757  00B4               	movwf	??_UART_Init+10
   488  0758  3000               	movlw	0
   489  0759  00B5               	movwf	??_UART_Init+11
   490  075A  082E               	movf	??_UART_Init+4,w
   491  075B  02B2               	subwf	??_UART_Init+8,f
   492  075C  082F               	movf	??_UART_Init+5,w
   493  075D  1C03               	skipc
   494  075E  0F2F               	incfsz	??_UART_Init+5,w
   495  075F  2F61               	goto	u361
   496  0760  2F62               	goto	u362
   497  0761                     u361:	
   498  0761  02B3               	subwf	??_UART_Init+9,f
   499  0762                     u362:	
   500  0762  0830               	movf	??_UART_Init+6,w
   501  0763  1C03               	skipc
   502  0764  0F30               	incfsz	??_UART_Init+6,w
   503  0765  2F67               	goto	u363
   504  0766  2F68               	goto	u364
   505  0767                     u363:	
   506  0767  02B4               	subwf	??_UART_Init+10,f
   507  0768                     u364:	
   508  0768  0831               	movf	??_UART_Init+7,w
   509  0769  1C03               	skipc
   510  076A  0F31               	incfsz	??_UART_Init+7,w
   511  076B  2F6D               	goto	u365
   512  076C  2F6E               	goto	u366
   513  076D                     u365:	
   514  076D  02B5               	subwf	??_UART_Init+11,f
   515  076E                     u366:	
   516  076E  0835               	movf	??_UART_Init+11,w
   517  076F  00F7               	movwf	___aldiv@dividend+3
   518  0770  0834               	movf	??_UART_Init+10,w
   519  0771  00F6               	movwf	___aldiv@dividend+2
   520  0772  0833               	movf	??_UART_Init+9,w
   521  0773  00F5               	movwf	___aldiv@dividend+1
   522  0774  0832               	movf	??_UART_Init+8,w
   523  0775  00F4               	movwf	___aldiv@dividend
   524  0776  120A  118A  2697  120A  118A  	fcall	___aldiv
   525  077B  0871               	movf	?___aldiv+1,w
   526  077C  00FA               	movwf	UART_Init@x+1
   527  077D  0870               	movf	?___aldiv,w
   528  077E  00F9               	movwf	UART_Init@x
   529                           
   530                           ;./uart.h: 20:   if(x>255)
   531  077F  3001               	movlw	1
   532  0780  027A               	subwf	UART_Init@x+1,w
   533  0781  3000               	movlw	0
   534  0782  1903               	skipnz
   535  0783  0279               	subwf	UART_Init@x,w
   536  0784  1C03               	skipc
   537  0785  2FE2               	goto	l821
   538                           
   539                           ;./uart.h: 21:   {;./uart.h: 22:     x = (8000000 - baudrate*16)/(baudrate*16);
   540  0786  1283               	bcf	3,5	;RP0=0, select bank0
   541  0787  1303               	bcf	3,6	;RP1=0, select bank0
   542  0788  0826               	movf	UART_Init@baudrate,w
   543  0789  00AA               	movwf	??_UART_Init
   544  078A  0827               	movf	UART_Init@baudrate+1,w
   545  078B  00AB               	movwf	??_UART_Init+1
   546  078C  0828               	movf	UART_Init@baudrate+2,w
   547  078D  00AC               	movwf	??_UART_Init+2
   548  078E  0829               	movf	UART_Init@baudrate+3,w
   549  078F  00AD               	movwf	??_UART_Init+3
   550  0790  3004               	movlw	4
   551  0791                     u385:	
   552  0791  1003               	clrc
   553  0792  0DAA               	rlf	??_UART_Init,f
   554  0793  0DAB               	rlf	??_UART_Init+1,f
   555  0794  0DAC               	rlf	??_UART_Init+2,f
   556  0795  0DAD               	rlf	??_UART_Init+3,f
   557  0796  3EFF               	addlw	-1
   558  0797  1D03               	skipz
   559  0798  2F91               	goto	u385
   560  0799  082D               	movf	??_UART_Init+3,w
   561  079A  00F3               	movwf	___aldiv@divisor+3
   562  079B  082C               	movf	??_UART_Init+2,w
   563  079C  00F2               	movwf	___aldiv@divisor+2
   564  079D  082B               	movf	??_UART_Init+1,w
   565  079E  00F1               	movwf	___aldiv@divisor+1
   566  079F  082A               	movf	??_UART_Init,w
   567  07A0  00F0               	movwf	___aldiv@divisor
   568  07A1  0826               	movf	UART_Init@baudrate,w
   569  07A2  00AE               	movwf	??_UART_Init+4
   570  07A3  0827               	movf	UART_Init@baudrate+1,w
   571  07A4  00AF               	movwf	??_UART_Init+5
   572  07A5  0828               	movf	UART_Init@baudrate+2,w
   573  07A6  00B0               	movwf	??_UART_Init+6
   574  07A7  0829               	movf	UART_Init@baudrate+3,w
   575  07A8  00B1               	movwf	??_UART_Init+7
   576  07A9  3004               	movlw	4
   577  07AA                     u395:	
   578  07AA  1003               	clrc
   579  07AB  0DAE               	rlf	??_UART_Init+4,f
   580  07AC  0DAF               	rlf	??_UART_Init+5,f
   581  07AD  0DB0               	rlf	??_UART_Init+6,f
   582  07AE  0DB1               	rlf	??_UART_Init+7,f
   583  07AF  3EFF               	addlw	-1
   584  07B0  1D03               	skipz
   585  07B1  2FAA               	goto	u395
   586  07B2  3000               	movlw	0
   587  07B3  00B2               	movwf	??_UART_Init+8
   588  07B4  3012               	movlw	18
   589  07B5  00B3               	movwf	??_UART_Init+9
   590  07B6  307A               	movlw	122
   591  07B7  00B4               	movwf	??_UART_Init+10
   592  07B8  3000               	movlw	0
   593  07B9  00B5               	movwf	??_UART_Init+11
   594  07BA  082E               	movf	??_UART_Init+4,w
   595  07BB  02B2               	subwf	??_UART_Init+8,f
   596  07BC  082F               	movf	??_UART_Init+5,w
   597  07BD  1C03               	skipc
   598  07BE  0F2F               	incfsz	??_UART_Init+5,w
   599  07BF  2FC1               	goto	u401
   600  07C0  2FC2               	goto	u402
   601  07C1                     u401:	
   602  07C1  02B3               	subwf	??_UART_Init+9,f
   603  07C2                     u402:	
   604  07C2  0830               	movf	??_UART_Init+6,w
   605  07C3  1C03               	skipc
   606  07C4  0F30               	incfsz	??_UART_Init+6,w
   607  07C5  2FC7               	goto	u403
   608  07C6  2FC8               	goto	u404
   609  07C7                     u403:	
   610  07C7  02B4               	subwf	??_UART_Init+10,f
   611  07C8                     u404:	
   612  07C8  0831               	movf	??_UART_Init+7,w
   613  07C9  1C03               	skipc
   614  07CA  0F31               	incfsz	??_UART_Init+7,w
   615  07CB  2FCD               	goto	u405
   616  07CC  2FCE               	goto	u406
   617  07CD                     u405:	
   618  07CD  02B5               	subwf	??_UART_Init+11,f
   619  07CE                     u406:	
   620  07CE  0835               	movf	??_UART_Init+11,w
   621  07CF  00F7               	movwf	___aldiv@dividend+3
   622  07D0  0834               	movf	??_UART_Init+10,w
   623  07D1  00F6               	movwf	___aldiv@dividend+2
   624  07D2  0833               	movf	??_UART_Init+9,w
   625  07D3  00F5               	movwf	___aldiv@dividend+1
   626  07D4  0832               	movf	??_UART_Init+8,w
   627  07D5  00F4               	movwf	___aldiv@dividend
   628  07D6  120A  118A  2697  120A  118A  	fcall	___aldiv
   629  07DB  0871               	movf	?___aldiv+1,w
   630  07DC  00FA               	movwf	UART_Init@x+1
   631  07DD  0870               	movf	?___aldiv,w
   632  07DE  00F9               	movwf	UART_Init@x
   633                           
   634                           ;./uart.h: 23:     BRGH = 1;
   635  07DF  1683               	bsf	3,5	;RP0=1, select bank1
   636  07E0  1303               	bcf	3,6	;RP1=0, select bank1
   637  07E1  1518               	bsf	24,2	;volatile
   638  07E2                     l821:	
   639                           
   640                           ;./uart.h: 25:   if(x<256)
   641  07E2  3001               	movlw	1
   642  07E3  027A               	subwf	UART_Init@x+1,w
   643  07E4  3000               	movlw	0
   644  07E5  1903               	skipnz
   645  07E6  0279               	subwf	UART_Init@x,w
   646  07E7  1803               	skipnc
   647  07E8  0008               	return
   648                           
   649                           ;./uart.h: 26:   {;./uart.h: 27:     SPBRG = x;
   650  07E9  0879               	movf	UART_Init@x,w
   651  07EA  1683               	bsf	3,5	;RP0=1, select bank1
   652  07EB  1303               	bcf	3,6	;RP1=0, select bank1
   653  07EC  0099               	movwf	25	;volatile
   654                           
   655                           ;./uart.h: 28:     SYNC = 0;
   656  07ED  1218               	bcf	24,4	;volatile
   657                           
   658                           ;./uart.h: 29:     SPEN = 1;
   659  07EE  1283               	bcf	3,5	;RP0=0, select bank0
   660  07EF  1303               	bcf	3,6	;RP1=0, select bank0
   661  07F0  1798               	bsf	24,7	;volatile
   662                           
   663                           ;./uart.h: 30:     TRISC7 = 1;
   664  07F1  1683               	bsf	3,5	;RP0=1, select bank1
   665  07F2  1303               	bcf	3,6	;RP1=0, select bank1
   666  07F3  1787               	bsf	7,7	;volatile
   667                           
   668                           ;./uart.h: 31:     TRISC6 = 1;
   669  07F4  1707               	bsf	7,6	;volatile
   670                           
   671                           ;./uart.h: 32:     CREN = 1;
   672  07F5  1283               	bcf	3,5	;RP0=0, select bank0
   673  07F6  1303               	bcf	3,6	;RP1=0, select bank0
   674  07F7  1618               	bsf	24,4	;volatile
   675                           
   676                           ;./uart.h: 33:     TXEN = 1;
   677  07F8  1683               	bsf	3,5	;RP0=1, select bank1
   678  07F9  1303               	bcf	3,6	;RP1=0, select bank1
   679  07FA  1698               	bsf	24,5	;volatile
   680  07FB  0008               	return
   681  07FC                     __end_of_UART_Init:	
   682                           
   683                           	psect	text3
   684  0697                     __ptext3:	
   685 ;; *************** function ___aldiv *****************
   686 ;; Defined at:
   687 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\aldiv.c"
   688 ;; Parameters:    Size  Location     Type
   689 ;;  divisor         4    0[COMMON] long 
   690 ;;  dividend        4    4[COMMON] long 
   691 ;; Auto vars:     Size  Location     Type
   692 ;;  quotient        4    2[BANK0 ] long 
   693 ;;  sign            1    1[BANK0 ] unsigned char 
   694 ;;  counter         1    0[BANK0 ] unsigned char 
   695 ;; Return value:  Size  Location     Type
   696 ;;                  4    0[COMMON] long 
   697 ;; Registers used:
   698 ;;		wreg, status,2, status,0
   699 ;; Tracked objects:
   700 ;;		On entry : 0/0
   701 ;;		On exit  : 0/0
   702 ;;		Unchanged: 0/0
   703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   704 ;;      Params:         8       0       0       0       0
   705 ;;      Locals:         0       6       0       0       0
   706 ;;      Temps:          1       0       0       0       0
   707 ;;      Totals:         9       6       0       0       0
   708 ;;Total ram usage:       15 bytes
   709 ;; Hardware stack levels used:    1
   710 ;; This function calls:
   711 ;;		Nothing
   712 ;; This function is called by:
   713 ;;		_UART_Init
   714 ;; This function uses a non-reentrant model
   715 ;;
   716                           
   717                           
   718                           ;psect for function ___aldiv
   719  0697                     ___aldiv:	
   720                           
   721                           ;incstack = 0
   722                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
   723  0697  1283               	bcf	3,5	;RP0=0, select bank0
   724  0698  1303               	bcf	3,6	;RP1=0, select bank0
   725  0699  01A1               	clrf	___aldiv@sign
   726  069A  1FF3               	btfss	___aldiv@divisor+3,7
   727  069B  2EA9               	goto	l224
   728  069C  09F0               	comf	___aldiv@divisor,f
   729  069D  09F1               	comf	___aldiv@divisor+1,f
   730  069E  09F2               	comf	___aldiv@divisor+2,f
   731  069F  09F3               	comf	___aldiv@divisor+3,f
   732  06A0  0AF0               	incf	___aldiv@divisor,f
   733  06A1  1903               	skipnz
   734  06A2  0AF1               	incf	___aldiv@divisor+1,f
   735  06A3  1903               	skipnz
   736  06A4  0AF2               	incf	___aldiv@divisor+2,f
   737  06A5  1903               	skipnz
   738  06A6  0AF3               	incf	___aldiv@divisor+3,f
   739  06A7  01A1               	clrf	___aldiv@sign
   740  06A8  0AA1               	incf	___aldiv@sign,f
   741  06A9                     l224:	
   742  06A9  1FF7               	btfss	___aldiv@dividend+3,7
   743  06AA  2EBA               	goto	l783
   744  06AB  09F4               	comf	___aldiv@dividend,f
   745  06AC  09F5               	comf	___aldiv@dividend+1,f
   746  06AD  09F6               	comf	___aldiv@dividend+2,f
   747  06AE  09F7               	comf	___aldiv@dividend+3,f
   748  06AF  0AF4               	incf	___aldiv@dividend,f
   749  06B0  1903               	skipnz
   750  06B1  0AF5               	incf	___aldiv@dividend+1,f
   751  06B2  1903               	skipnz
   752  06B3  0AF6               	incf	___aldiv@dividend+2,f
   753  06B4  1903               	skipnz
   754  06B5  0AF7               	incf	___aldiv@dividend+3,f
   755  06B6  3001               	movlw	1
   756  06B7  00F8               	movwf	??___aldiv
   757  06B8  0878               	movf	??___aldiv,w
   758  06B9  06A1               	xorwf	___aldiv@sign,f
   759  06BA                     l783:	
   760  06BA  3000               	movlw	0
   761  06BB  00A5               	movwf	___aldiv@quotient+3
   762  06BC  3000               	movlw	0
   763  06BD  00A4               	movwf	___aldiv@quotient+2
   764  06BE  3000               	movlw	0
   765  06BF  00A3               	movwf	___aldiv@quotient+1
   766  06C0  3000               	movlw	0
   767  06C1  00A2               	movwf	___aldiv@quotient
   768  06C2  0873               	movf	___aldiv@divisor+3,w
   769  06C3  0472               	iorwf	___aldiv@divisor+2,w
   770  06C4  0471               	iorwf	___aldiv@divisor+1,w
   771  06C5  0470               	iorwf	___aldiv@divisor,w
   772  06C6  1903               	skipnz
   773  06C7  2F0F               	goto	l805
   774  06C8  01A0               	clrf	___aldiv@counter
   775  06C9  0AA0               	incf	___aldiv@counter,f
   776  06CA                     l791:	
   777  06CA  1BF3               	btfsc	___aldiv@divisor+3,7
   778  06CB  2EDA               	goto	l793
   779  06CC  3001               	movlw	1
   780  06CD  00F8               	movwf	??___aldiv
   781  06CE                     u275:	
   782  06CE  1003               	clrc
   783  06CF  0DF0               	rlf	___aldiv@divisor,f
   784  06D0  0DF1               	rlf	___aldiv@divisor+1,f
   785  06D1  0DF2               	rlf	___aldiv@divisor+2,f
   786  06D2  0DF3               	rlf	___aldiv@divisor+3,f
   787  06D3  0BF8               	decfsz	??___aldiv,f
   788  06D4  2ECE               	goto	u275
   789  06D5  3001               	movlw	1
   790  06D6  00F8               	movwf	??___aldiv
   791  06D7  0878               	movf	??___aldiv,w
   792  06D8  07A0               	addwf	___aldiv@counter,f
   793  06D9  2ECA               	goto	l791
   794  06DA                     l793:	
   795  06DA  3001               	movlw	1
   796  06DB  00F8               	movwf	??___aldiv
   797  06DC                     u295:	
   798  06DC  1003               	clrc
   799  06DD  0DA2               	rlf	___aldiv@quotient,f
   800  06DE  0DA3               	rlf	___aldiv@quotient+1,f
   801  06DF  0DA4               	rlf	___aldiv@quotient+2,f
   802  06E0  0DA5               	rlf	___aldiv@quotient+3,f
   803  06E1  0BF8               	decfsz	??___aldiv,f
   804  06E2  2EDC               	goto	u295
   805  06E3  0873               	movf	___aldiv@divisor+3,w
   806  06E4  0277               	subwf	___aldiv@dividend+3,w
   807  06E5  1D03               	skipz
   808  06E6  2EF1               	goto	u305
   809  06E7  0872               	movf	___aldiv@divisor+2,w
   810  06E8  0276               	subwf	___aldiv@dividend+2,w
   811  06E9  1D03               	skipz
   812  06EA  2EF1               	goto	u305
   813  06EB  0871               	movf	___aldiv@divisor+1,w
   814  06EC  0275               	subwf	___aldiv@dividend+1,w
   815  06ED  1D03               	skipz
   816  06EE  2EF1               	goto	u305
   817  06EF  0870               	movf	___aldiv@divisor,w
   818  06F0  0274               	subwf	___aldiv@dividend,w
   819  06F1                     u305:	
   820  06F1  1C03               	skipc
   821  06F2  2F02               	goto	l801
   822  06F3  0870               	movf	___aldiv@divisor,w
   823  06F4  02F4               	subwf	___aldiv@dividend,f
   824  06F5  0871               	movf	___aldiv@divisor+1,w
   825  06F6  1C03               	skipc
   826  06F7  0F71               	incfsz	___aldiv@divisor+1,w
   827  06F8  02F5               	subwf	___aldiv@dividend+1,f
   828  06F9  0872               	movf	___aldiv@divisor+2,w
   829  06FA  1C03               	skipc
   830  06FB  0F72               	incfsz	___aldiv@divisor+2,w
   831  06FC  02F6               	subwf	___aldiv@dividend+2,f
   832  06FD  0873               	movf	___aldiv@divisor+3,w
   833  06FE  1C03               	skipc
   834  06FF  0F73               	incfsz	___aldiv@divisor+3,w
   835  0700  02F7               	subwf	___aldiv@dividend+3,f
   836  0701  1422               	bsf	___aldiv@quotient,0
   837  0702                     l801:	
   838  0702  3001               	movlw	1
   839  0703                     u315:	
   840  0703  1003               	clrc
   841  0704  0CF3               	rrf	___aldiv@divisor+3,f
   842  0705  0CF2               	rrf	___aldiv@divisor+2,f
   843  0706  0CF1               	rrf	___aldiv@divisor+1,f
   844  0707  0CF0               	rrf	___aldiv@divisor,f
   845  0708  3EFF               	addlw	-1
   846  0709  1D03               	skipz
   847  070A  2F03               	goto	u315
   848  070B  3001               	movlw	1
   849  070C  02A0               	subwf	___aldiv@counter,f
   850  070D  1D03               	btfss	3,2
   851  070E  2EDA               	goto	l793
   852  070F                     l805:	
   853  070F  0821               	movf	___aldiv@sign,w
   854  0710  1903               	btfsc	3,2
   855  0711  2F1D               	goto	l809
   856  0712  09A2               	comf	___aldiv@quotient,f
   857  0713  09A3               	comf	___aldiv@quotient+1,f
   858  0714  09A4               	comf	___aldiv@quotient+2,f
   859  0715  09A5               	comf	___aldiv@quotient+3,f
   860  0716  0AA2               	incf	___aldiv@quotient,f
   861  0717  1903               	skipnz
   862  0718  0AA3               	incf	___aldiv@quotient+1,f
   863  0719  1903               	skipnz
   864  071A  0AA4               	incf	___aldiv@quotient+2,f
   865  071B  1903               	skipnz
   866  071C  0AA5               	incf	___aldiv@quotient+3,f
   867  071D                     l809:	
   868  071D  0825               	movf	___aldiv@quotient+3,w
   869  071E  00F3               	movwf	?___aldiv+3
   870  071F  0824               	movf	___aldiv@quotient+2,w
   871  0720  00F2               	movwf	?___aldiv+2
   872  0721  0823               	movf	___aldiv@quotient+1,w
   873  0722  00F1               	movwf	?___aldiv+1
   874  0723  0822               	movf	___aldiv@quotient,w
   875  0724  00F0               	movwf	?___aldiv
   876  0725  0008               	return
   877  0726                     __end_of___aldiv:	
   878                           
   879                           	psect	text4
   880  065B                     __ptext4:	
   881 ;; *************** function _UART_Data_Ready *****************
   882 ;; Defined at:
   883 ;;		line 60 in file "./uart.h"
   884 ;; Parameters:    Size  Location     Type
   885 ;;		None
   886 ;; Auto vars:     Size  Location     Type
   887 ;;		None
   888 ;; Return value:  Size  Location     Type
   889 ;;                  1    wreg      unsigned char 
   890 ;; Registers used:
   891 ;;		wreg
   892 ;; Tracked objects:
   893 ;;		On entry : 0/0
   894 ;;		On exit  : 0/0
   895 ;;		Unchanged: 0/0
   896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   897 ;;      Params:         0       0       0       0       0
   898 ;;      Locals:         0       0       0       0       0
   899 ;;      Temps:          0       0       0       0       0
   900 ;;      Totals:         0       0       0       0       0
   901 ;;Total ram usage:        0 bytes
   902 ;; Hardware stack levels used:    1
   903 ;; This function calls:
   904 ;;		Nothing
   905 ;; This function is called by:
   906 ;;		_main
   907 ;; This function uses a non-reentrant model
   908 ;;
   909                           
   910                           
   911                           ;psect for function _UART_Data_Ready
   912  065B                     _UART_Data_Ready:	
   913                           
   914                           ;./uart.h: 62:   return RCIF;
   915                           
   916                           ;incstack = 0
   917                           ; Regs used in _UART_Data_Ready: [wreg]
   918  065B  3000               	movlw	0
   919  065C  1283               	bcf	3,5	;RP0=0, select bank0
   920  065D  1303               	bcf	3,6	;RP1=0, select bank0
   921  065E  1A8C               	btfsc	12,5	;volatile
   922  065F  3001               	movlw	1
   923  0660  0008               	return
   924  0661                     __end_of_UART_Data_Ready:	
   925  007E                     btemp	set	126	;btemp
   926  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     22      22
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_UART_Init
    _UART_Init->___aldiv

Critical Paths under _main in BANK0

    _main->_UART_Init
    _UART_Init->___aldiv

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0     836
                                             11 COMMON     3     3      0
                    _UART_Data_Ready
                          _UART_Init
                          _UART_Read
 ---------------------------------------------------------------------------------
 (1) _UART_Read                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                           18    14      4     836
                                              9 COMMON     2     2      0
                                              6 BANK0     16    12      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     604
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _UART_Data_Ready                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _UART_Data_Ready
   _UART_Init
     ___aldiv
   _UART_Read

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     16      16       5       27.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Sun Jun 16 18:35:01 2019

             __CFG_CP$OFF 0000                        l56 0661                       l224 06A9  
                     l801 0702                       l805 070F                       l821 07E2  
                     l809 071D                       l843 0679                       l791 06CA  
                     l783 06BA                       l847 0689                       l793 06DA  
                     u305 06F1                       u401 07C1                       u402 07C2  
                     u315 0703                       u403 07C7                       u404 07C8  
                     u405 07CD                       u406 07CE                       u361 0761  
                     u345 0731                       u362 0762              __CFG_CPD$OFF 0000  
                     u275 06CE                       u363 0767                       u355 074A  
                     u364 0768                       u365 076D                       u437 068F  
                     u366 076E                       u295 06DC                       u385 0791  
                     u395 07AA              __CFG_FOSC$HS 0000              __CFG_LVP$OFF 0000  
                    _BRGH 04C2                      _CREN 00C4                      _RCIF 0065  
                    _SPEN 00C7                      _TRMT 04C1                      _TXEN 04C5  
                    _SYNC 04C4              __CFG_WRT$OFF 0000                      _main 0667  
                    btemp 007E             __CFG_BOREN$ON 0000                      start 0000  
         __end_of___aldiv 0726                     ?_main 0070             __CFG_WDTE$OFF 0000  
                   _RCREG 001A                     _SPBRG 0099                     _PORTB 0006  
                   _TRISB 0086                     _TXREG 0019        __size_of_UART_Init 00D6  
      __size_of_UART_Read 0006                     status 0003                     wtemp0 007E  
         __initialization 07FC              __end_of_main 0697                    ??_main 007B  
                  _TRISC6 043E                    _TRISC7 043F            __CFG_PWRTE$OFF 0000  
       __end_of_UART_Init 07FC         __end_of_UART_Read 0667                 ??___aldiv 0078  
 __end_of__initialization 07FC            __pcstackCOMMON 0070  __size_of_UART_Data_Ready 0006  
              __pmaintext 0667                   ___aldiv 0697                   __ptext1 0661  
                 __ptext2 0726                   __ptext3 0697                   __ptext4 065B  
        ___aldiv@dividend 0074      end_of_initialization 07FC          ___aldiv@quotient 0022  
       ??_UART_Data_Ready 0070                 _UART_Init 0726                 _UART_Read 0661  
              ?_UART_Init 0026                ?_UART_Read 0070       start_initialization 07FC  
               ___latbits 0002             __pcstackBANK0 0020                  ?___aldiv 0070  
             ??_UART_Init 002A               ??_UART_Read 0070                UART_Init@x 0079  
         ___aldiv@divisor 0070           ___aldiv@counter 0020           _UART_Data_Ready 065B  
       UART_Init@baudrate 0026          __size_of___aldiv 008F   __end_of_UART_Data_Ready 0661  
           __size_of_main 0030              ___aldiv@sign 0021          ?_UART_Data_Ready 0070  
